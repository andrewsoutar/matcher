(uiop:define-package #:com.andrewsoutar.matcher/matchers
  (:use)
  (:import-from #:com.andrewsoutar.matcher/impl)
  (:import-from #:com.andrewsoutar.matcher/main)
  (:export #:and #:satisfies #:type #:call #:eq #:eql #:equal #:equalp #:string=))
(cl:in-package #:com.andrewsoutar.matcher/impl)

(defmatcher (com.andrewsoutar.matcher/matchers:and &rest patterns) (value value-safe-p)
  (flet ((frob (value) (dolist (pattern patterns) (%compile-pattern pattern value t))))
    (if value-safe-p
        (frob value)
        (let ((value-var (gensym "AND-VALUE")))
          (collect *temporaries* value-var)
          (collect *actions* `(setq ,value-var ,value))
          (frob value-var)))))

(macrolet ((def ((name &rest params) test-form)
             `(defmatcher (,(find-symbol (symbol-name name) '#:com.andrewsoutar.matcher/matchers) ,@params)
                  (value)
                (collect *actions* `(unless ,,test-form ,*fail*)))))
  (def (satisfies predicate) `(funcall ,predicate ,value))
  (def (type type-specifier) `(typep ,value ',type-specifier))
  (def (call call-form) `(,@call-form ,value))
  (macrolet ((defeq (name) `(def (,name thing) `(,',name ,thing ,value))))
    (defeq eq)
    (defeq eql)
    (defeq equal)
    (defeq equalp)
    (defeq string=)))
